/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Health Check */
    get: operations["health_check__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/items/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Items */
    get: operations["get_items_items__get"];
    put?: never;
    /** Create Item */
    post: operations["create_item_items__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/items/{item_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Item */
    get: operations["get_item_items__item_id__get"];
    /** Update Item */
    put: operations["update_item_items__item_id__put"];
    post?: never;
    /** Delete Item */
    delete: operations["delete_item_items__item_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** ItemBase */
    ItemBase: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Image Url
       * Format: uri
       */
      image_url: string;
    };
    /** ItemDelete */
    ItemDelete: {
      /** Id */
      id: number;
    };
    /** ItemRead */
    ItemRead: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Image Url
       * Format: uri
       */
      image_url: string;
      /** Id */
      id: number;
    };
    /** ItemUpdate */
    ItemUpdate: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Image Url */
      image_url?: string | null;
    };
    /** ResponseModel[ItemDelete] */
    ResponseModel_ItemDelete_: {
      /**
       * Status
       * @default 200
       */
      status: number;
      data?: components["schemas"]["ItemDelete"] | null;
      /**
       * Message
       * @default Success
       */
      message: string;
    };
    /** ResponseModel[ItemRead] */
    ResponseModel_ItemRead_: {
      /**
       * Status
       * @default 200
       */
      status: number;
      data?: components["schemas"]["ItemRead"] | null;
      /**
       * Message
       * @default Success
       */
      message: string;
    };
    /** ResponseModel[list[ItemRead]] */
    ResponseModel_list_ItemRead__: {
      /**
       * Status
       * @default 200
       */
      status: number;
      /** Data */
      data?: components["schemas"]["ItemRead"][] | null;
      /**
       * Message
       * @default Success
       */
      message: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  health_check__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  get_items_items__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseModel_list_ItemRead__"];
        };
      };
    };
  };
  create_item_items__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemBase"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseModel_ItemRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_item_items__item_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseModel_ItemRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_item_items__item_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseModel_ItemRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_item_items__item_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        item_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResponseModel_ItemDelete_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
